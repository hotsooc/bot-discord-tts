const { SlashCommandBuilder } = require('discord.js');
const { queueTTS } = require('../../utils/audio');
const { getVoiceConnection } = require('@discordjs/voice');
const { MessageFlags } = require('discord-api-types/v10');
const logger = require('../../utils/logger');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('say')
    .setDescription('Ph√°t vƒÉn b·∫£n th√†nh gi·ªçng n√≥i trong k√™nh voice.')
    .addStringOption(option =>
      option.setName('text')
        .setDescription('VƒÉn b·∫£n c·∫ßn ph√°t')
        .setRequired(true)
    ),
  async execute(interaction) {
    const voiceChannel = interaction.member.voice.channel;
    if (!voiceChannel) {
      await interaction.reply({
        content: 'üîä B·∫°n ph·∫£i v√†o k√™nh voice tr∆∞·ªõc.',
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    const connection = getVoiceConnection(interaction.guild.id);
    if (!connection) {
      await interaction.reply({
        content: '‚ùó Bot ch∆∞a ·ªü trong voice. H√£y d√πng l·ªánh `/join` tr∆∞·ªõc.',
        flags: MessageFlags.Ephemeral,
      });
      return;
    }


    const text = interaction.options.getString('text');
    try {
      await queueTTS(interaction, text, voiceChannel);
      await interaction.reply({
        content: `**${interaction.member.displayName}** n√≥i: **${text}**`,
      });
      logger.info(`L·ªánh /say ƒë∆∞·ª£c g·ªçi b·ªüi ${interaction.user.tag}: "${text}"`);
    } catch (error) {
      logger.error(`L·ªói khi x·ª≠ l√Ω l·ªánh /say b·ªüi ${interaction.user.tag}:`, error);
      await interaction.reply({
        content: '‚ùå L·ªói khi x·ª≠ l√Ω vƒÉn b·∫£n TTS.',
        flags: MessageFlags.Ephemeral,
      });
    }
  },
};
