const { SlashCommandBuilder, ActionRowBuilder, StringSelectMenuBuilder } = require('discord.js');
const { playSound } = require('../../utils/audio');
const logger = require('../../utils/logger');
const fs = require('fs');
const path = require('path');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('soundboard')
    .setDescription('Ph√°t m·ªôt √¢m thanh t·ª´ soundboard trong k√™nh voice.'),
  async execute(interaction) {
    const voiceChannel = interaction.member.voice.channel;
    if (!voiceChannel) {
      await interaction.reply({
        content: 'üîä B·∫°n ph·∫£i v√†o k√™nh voice tr∆∞·ªõc.',
        ephemeral: true,
      });
      return;
    }

    const botMember = interaction.guild.members.me;
    if (!botMember.voice.channel) {
      await interaction.reply({
        content: 'ü§ñ Bot ph·∫£i v√†o k√™nh voice tr∆∞·ªõc. S·ª≠ d·ª•ng l·ªánh /join.',
        ephemeral: true,
      });
      return;
    }

    if (botMember.voice.channel.id !== voiceChannel.id) {
      await interaction.reply({
        content: 'ü§ñ B·∫°n ph·∫£i ·ªü c√πng k√™nh voice v·ªõi bot.',
        ephemeral: true,
      });
      return;
    }

    // L·∫•y danh s√°ch √¢m thanh
    const soundboardPath = path.join(__dirname, '../../assets/soundboard');
    let soundFiles = [];
    try {
      if (fs.existsSync(soundboardPath)) {
        soundFiles = fs
          .readdirSync(soundboardPath)
          .filter(file => file.endsWith('.mp3'))
          .map(file => ({ label: file.split('.')[0], value: file }));
        if (soundFiles.length === 0) {
          await interaction.reply({
            content: '‚ùå Kh√¥ng t√¨m th·∫•y √¢m thanh n√†o trong th∆∞ m·ª•c soundboard.',
            ephemeral: true,
          });
          return;
        }
      } else {
        logger.warn(`Th∆∞ m·ª•c soundboard kh√¥ng t·ªìn t·∫°i t·∫°i: ${soundboardPath}`);
        await interaction.reply({
          content: '‚ùå Th∆∞ m·ª•c soundboard kh√¥ng t·ªìn t·∫°i.',
          ephemeral: true,
        });
        return;
      }
    } catch (error) {
      logger.error(`L·ªói khi ƒë·ªçc th∆∞ m·ª•c soundboard: ${error.message}`);
      await interaction.reply({
        content: '‚ùå L·ªói khi t·∫£i danh s√°ch √¢m thanh.',
        ephemeral: true,
      });
      return;
    }

    // Gi·ªõi h·∫°n t·ªëi ƒëa 25 t√πy ch·ªçn cho select menu
    const options = soundFiles.slice(0, 25); // gi·ªõi h·∫°n 25 t√πy ch·ªçn
    const selectMenu = new StringSelectMenuBuilder()
      .setCustomId('soundboard_select')
      .setPlaceholder('Ch·ªçn m·ªôt √¢m thanh ƒë·ªÉ ph√°t')
      .addOptions(options);

    const row = new ActionRowBuilder().addComponents(selectMenu);

    await interaction.reply({
      content: 'üé∂ Vui l√≤ng ch·ªçn m·ªôt √¢m thanh t·ª´ danh s√°ch:',
      components: [row],
      ephemeral: true,
    });
  },
};