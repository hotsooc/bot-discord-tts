const { SlashCommandBuilder } = require('discord.js');
const fs = require('fs').promises;
const path = require('path');
const logger = require('../../utils/logger');
const { hasPermission } = require('../../utils/permissions');


module.exports = {
  data: new SlashCommandBuilder()
    .setName('listban')
    .setDescription('Hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng b·ªã c·∫•m s·ª≠ d·ª•ng bot.'),
  async execute(interaction) {
    await interaction.deferReply({ ephemeral: true });

    const allowedRoles = ['Leader', 'Moderator'];
    if (!await hasPermission(interaction, null, allowedRoles)) {
      return;
    }

    const dataDir = path.join(__dirname, '../../data');
    try {
      await fs.mkdir(dataDir, { recursive: true });
    } catch (err) {
      logger.error(`L·ªói khi t·∫°o th∆∞ m·ª•c ${dataDir}:`, err);
      await interaction.followUp({
        content: '‚ö†Ô∏è L·ªói khi kh·ªüi t·∫°o th∆∞ m·ª•c d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.',
        ephemeral: true,
      });
      return;
    }

    const filePath = path.join(dataDir, 'blacklist.json');

    // Read blacklist file
    let bannedUsers = { banned: [] };
    try {
      const data = await fs.readFile(filePath, 'utf8');
      bannedUsers = JSON.parse(data);
      if (!Array.isArray(bannedUsers.banned)) {
        bannedUsers.banned = [];
        logger.warn(`blacklist.json kh√¥ng c√≥ m·∫£ng banned h·ª£p l·ªá, kh·ªüi t·∫°o l·∫°i: ${filePath}`);
      }
    } catch (err) {
      if (err.code === 'ENOENT') {
        logger.info(`T·ªáp ${filePath} kh√¥ng t·ªìn t·∫°i, tr·∫£ v·ªÅ danh s√°ch r·ªóng`);
      } else {
        logger.error(`L·ªói khi ƒë·ªçc ${filePath}:`, err);
        await interaction.followUp({
          content: '‚ö†Ô∏è L·ªói khi ƒë·ªçc danh s√°ch c·∫•m. Vui l√≤ng th·ª≠ l·∫°i sau.',
          ephemeral: true,
        });
        return;
      }
    }

    if (bannedUsers.banned.length === 0) {
      await interaction.followUp({
        content: '‚úÖ Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o trong danh s√°ch c·∫•m.',
        ephemeral: true,
      });
      logger.info(`L·ªánh /listban ƒë∆∞·ª£c g·ªçi b·ªüi ${interaction.user.tag}: Danh s√°ch c·∫•m r·ªóng`);
      return;
    }

    const bannedList = [];
    for (const userId of bannedUsers.banned) {
      try {
        const user = await interaction.client.users.fetch(userId);
        let displayName = 'Kh√¥ng x√°c ƒë·ªãnh';
        try {
          const member = await interaction.guild.members.fetch(userId);
          displayName = member.displayName || user.username;
        } catch (memberError) {
          logger.warn(`Kh√¥ng th·ªÉ l·∫•y GuildMember cho ng∆∞·ªùi d√πng ${userId}:`, memberError);
        }
        bannedList.push(`- ${displayName} (username: ${user.username})`);
      } catch (error) {
        bannedList.push(`- Kh√¥ng x√°c ƒë·ªãnh (username: Kh√¥ng x√°c ƒë·ªãnh`);
        logger.warn(`Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng ${userId}:`, error);
      }
    }

    // Dislay
    const response = `üìú **Danh s√°ch ng∆∞·ªùi d√πng b·ªã c·∫•m**:\n${bannedList.join('\n')}`;
    try {
      await interaction.followUp({
        content: response,
        ephemeral: true,
      });
      logger.info(`L·ªánh /listban ƒë∆∞·ª£c g·ªçi b·ªüi ${interaction.user.tag}: Hi·ªÉn th·ªã ${bannedUsers.banned.length} ng∆∞·ªùi d√πng b·ªã c·∫•m`);
    } catch (error) {
      logger.error(`L·ªói khi tr·∫£ l·ªùi l·ªánh /listban b·ªüi ${interaction.user.tag}:`, error);
      await interaction.followUp({
        content: '‚ö†Ô∏è L·ªói khi hi·ªÉn th·ªã danh s√°ch c·∫•m. Vui l√≤ng th·ª≠ l·∫°i sau.',
        ephemeral: true,
      });
    }
  },
};